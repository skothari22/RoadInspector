/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.roadinspector;

import java.awt.Color;
import java.awt.Graphics2D;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JProgressBar;
import javax.swing.Painter;
import javax.swing.SwingUtilities;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author synerzip
 */
public class RoadSideCameraController extends javax.swing.JFrame {

    /**
     * Creates new form RoadSideCameraController
     */
    int counter = 0;
    int minValue = 0;
    int maxValue = 90;
    int color = 1; // 0 for red 1 for green

    public RoadSideCameraController() {
        initComponents();
        jprogressSignal.setMaximum(90);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jprogressSignal = new javax.swing.JProgressBar();
        btnStartSignal = new javax.swing.JButton();
        txtSignalLocation = new javax.swing.JTextField();
        pnlImagesCaptured = new javax.swing.JPanel();
        lblImagePanel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Traffic Signal");

        btnStartSignal.setText("Start Signal");
        btnStartSignal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartSignalActionPerformed(evt);
            }
        });

        txtSignalLocation.setText("Enter traffic signal location...");

        javax.swing.GroupLayout pnlImagesCapturedLayout = new javax.swing.GroupLayout(pnlImagesCaptured);
        pnlImagesCaptured.setLayout(pnlImagesCapturedLayout);
        pnlImagesCapturedLayout.setHorizontalGroup(
            pnlImagesCapturedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnlImagesCapturedLayout.setVerticalGroup(
            pnlImagesCapturedLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel1.setText("Traffic Signal Camera Controller");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jprogressSignal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(txtSignalLocation, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnStartSignal))
            .addComponent(pnlImagesCaptured, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSignalLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStartSignal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlImagesCaptured, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jprogressSignal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void progressValueUpdater() {

        Thread runner = new Thread() {
            public void run() {

                while (true) {
                    UIDefaults defaults = new UIDefaults();
                    defaults.put("ProgressBar[Enabled].foregroundPainter", new FillPainter(color == 1 ? Color.GREEN : Color.RED));
                    defaults.put("ProgressBar[Enabled+Finished].foregroundPainter", new FillPainter(color == 1 ? Color.GREEN : Color.RED));
                    jprogressSignal.putClientProperty("Nimbus.Overrides.InheritDefaults", Boolean.TRUE);
                    jprogressSignal.putClientProperty("Nimbus.Overrides", defaults);
                    color = (color + 1) % 2;
                    counter = minValue;
                    while (counter <= maxValue) {
                        Runnable runme = new Runnable() {
                            public void run() {
                                jprogressSignal.setValue(counter);
                            }
                        };
                        SwingUtilities.invokeLater(runme);
                        counter++;
                        try {
                            Thread.sleep(1000);
                        } catch (Exception ex) {
                        }
                    }
                }
            }
        };

        Thread capturer = new Thread() {
            public void run() {

                while (true) {
                    System.out.println("In capture thread:");

                    System.out.println(color);
                    JSONParser jsonParser = new JSONParser();

                    try (FileReader reader = new FileReader("test/resources/numberplates.json")) {
                        //Read JSON file
                        Object obj = jsonParser.parse(reader);

                        JSONArray numberplates = (JSONArray) obj;
                        Random rnd= new Random();
                        
                        JSONObject object= (JSONObject)numberplates.get( Math.abs( rnd.nextInt())%100);
                        System.out.println( object.get("content"));
                        URL url = new URL(object.get("content").toString());
                        
                        java.awt.Image image = ImageIO.read(url);
                       
                        lblImagePanel.setIcon( new ImageIcon(image.getScaledInstance(lblImagePanel.getWidth(), lblImagePanel.getHeight(), 1)));
                        
                        //Iterate over employee array
                        //employeeList.forEach(emp -> parseEmployeeObject((JSONObject) emp));

                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    } catch (IOException e) {
                        e.printStackTrace();
                    } catch (ParseException e) {
                        e.printStackTrace();
                    }
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                    }
                }
            }
        };

        runner.start();
        capturer.start();

    }

    private void btnStartSignalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartSignalActionPerformed
        // TODO add your handling code here:
        progressValueUpdater();
    }//GEN-LAST:event_btnStartSignalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RoadSideCameraController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RoadSideCameraController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RoadSideCameraController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RoadSideCameraController.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RoadSideCameraController().setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStartSignal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jprogressSignal;
    private javax.swing.JLabel lblImagePanel;
    private javax.swing.JPanel pnlImagesCaptured;
    private javax.swing.JTextField txtSignalLocation;
    // End of variables declaration//GEN-END:variables
}

class FillPainter implements Painter<JProgressBar> {

    private final Color c1;

    public FillPainter(Color c1) {
        this.c1 = c1;
    }

    @Override
    public void paint(Graphics2D g, JProgressBar object, int width, int height) {
        g.setColor(c1);
        g.fillRect(0, 2, width - 1, height - 5);
    }
}
